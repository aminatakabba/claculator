{"version":3,"sources":["Number.js","Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Number","content","onButtonClick","type","className","onClick","Calculator","useState","userInput","setUserInput","memory","setMemory","operator","setOperator","handleButtonPress","num","parseFloat","toString","length","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92e3afea.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Number.css'\r\n\r\nfunction Number({content, onButtonClick, type }) {\r\n    return (\r\n        <div className=\"number\">\r\n            <div className=\"number__container\" onClick={onButtonClick(content)}>\r\n                <h1 className=\"number__containerH1\" >{content}</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Number\r\n","import React, { useState } from 'react'\r\nimport Number from './Number'\r\nimport './Calculator.css'\r\n\r\nfunction Calculator() {\r\n    const [userInput, setUserInput] = useState('0');\r\n    const [memory, setMemory] = useState(null);\r\n    const [operator, setOperator] = useState(null);\r\n \r\n    const handleButtonPress =  (content) => () => {\r\n        const num = parseFloat(userInput)\r\n        \r\n        if(content === 'AC') {\r\n            setUserInput('0');\r\n            setMemory(null)\r\n            setOperator(null);\r\n            return;\r\n        }\r\n\r\n        if(content === 'Â±') {\r\n            setUserInput((num * -1).toString());\r\n            return;\r\n        }\r\n\r\n        if(content === '.') {\r\n            if(userInput.includes('.')) return;\r\n            setUserInput(userInput + '.');\r\n            return;\r\n        }        \r\n\r\n        if(content === '+') {\r\n            if(operator !== null) {\r\n                if(operator === '+') {\r\n                    setMemory((memory + parseFloat(userInput)));\r\n                } else if (operator === '-') {\r\n                    setMemory((memory - parseFloat(userInput)));\r\n                } else if (operator === '/') {\r\n                    setMemory((memory / parseFloat(userInput)));\r\n                } else if (operator === 'x') {\r\n                    setMemory((memory * parseFloat(userInput)));\r\n                }\r\n            } else {\r\n                setMemory(parseFloat(userInput));\r\n            }\r\n            \r\n            setUserInput('0');\r\n            setOperator('+');\r\n            return;\r\n        }\r\n\r\n        if(content === '-') {\r\n            if(operator !== null) {\r\n                if(operator === '+') {\r\n                    setMemory((memory + parseFloat(userInput)));\r\n                } else if (operator === '-') {\r\n                    setMemory((memory - parseFloat(userInput)));\r\n                } else if (operator === '/') {\r\n                    setMemory((memory / parseFloat(userInput)));\r\n                } else if (operator === 'x') {\r\n                    setMemory((memory * parseFloat(userInput)));\r\n                }\r\n            } else {\r\n                setMemory(parseFloat(userInput));\r\n            }\r\n            setUserInput('0');\r\n            setOperator('-');\r\n            return;\r\n        }\r\n\r\n        if(content === '/') {\r\n            if(operator !== null) {\r\n                if(operator === '+') {\r\n                    setMemory((memory + parseFloat(userInput)));\r\n                } else if (operator === '-') {\r\n                    setMemory((memory - parseFloat(userInput)));\r\n                } else if (operator === '/') {\r\n                    setMemory((memory / parseFloat(userInput)));\r\n                } else if (operator === 'x') {\r\n                    setMemory((memory * parseFloat(userInput)));\r\n                }\r\n            } else {\r\n                setMemory(parseFloat(userInput));\r\n            }\r\n            setUserInput('0');\r\n            setOperator('/');\r\n            return;\r\n        }\r\n\r\n        if(content === 'x') {\r\n            if(operator !== null) {\r\n                if(operator === '+') {\r\n                    setMemory((memory + parseFloat(userInput)));\r\n                } else if (operator === '-') {\r\n                    setMemory((memory - parseFloat(userInput)));\r\n                } else if (operator === '/') {\r\n                    setMemory((memory / parseFloat(userInput)));\r\n                } else if (operator === 'x') {\r\n                    setMemory((memory * parseFloat(userInput)));\r\n                }\r\n            } else {\r\n                setMemory(parseFloat(userInput));\r\n            }\r\n            setUserInput('0');\r\n            setOperator('x');\r\n            return;\r\n        }\r\n        \r\n        if(content === '=') {\r\n            if(!operator) return;\r\n            if(operator === '+') {\r\n                setUserInput((memory + parseFloat(userInput)).toString());\r\n            } else if (operator === '-') {\r\n                setUserInput((memory - parseFloat(userInput)).toString());\r\n            } else if (operator === '/') {\r\n                setUserInput((memory / parseFloat(userInput)).toString());\r\n            } else if (operator === 'x') {\r\n                setUserInput((memory * parseFloat(userInput)).toString());\r\n            }\r\n\r\n            setMemory(null);\r\n            setOperator(null);\r\n            return;\r\n        }\r\n\r\n        if(userInput[userInput.length -1] === '.') {\r\n            setUserInput(userInput + content);\r\n        } else {\r\n            setUserInput((num + content).toString());\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <div className=\"calculator\">\r\n            <div className=\"calculator__container\">\r\n                <div className=\"calculator__containerInput\" >{userInput}</div>\r\n                \r\n                <div className=\"calculator__containerNumbers\">\r\n                    <Number onButtonClick={handleButtonPress} content='1'/>\r\n                    <Number onButtonClick={handleButtonPress} content='2'/>\r\n                    <Number onButtonClick={handleButtonPress} content='3'/>\r\n                    <Number onButtonClick={handleButtonPress} content='4'/>\r\n                    <Number onButtonClick={handleButtonPress} content='5'/>\r\n                    <Number onButtonClick={handleButtonPress} content='6'/>\r\n                    <Number onButtonClick={handleButtonPress} content='7'/>\r\n                    <Number onButtonClick={handleButtonPress} content='8'/>\r\n                    <Number onButtonClick={handleButtonPress} content='9'/>\r\n                    <Number onButtonClick={handleButtonPress} content='0'/>\r\n                    <Number onButtonClick={handleButtonPress} content='.'/> \r\n                    <Number onButtonClick={handleButtonPress} content='Â±'/>\r\n                </div>\r\n\r\n                <div><br /></div>\r\n\r\n                <div className=\"calculator__containerOperators\">\r\n                    <Number onButtonClick={handleButtonPress} content='+' type=\"operator\"  />\r\n                    <Number onButtonClick={handleButtonPress} content='-' type=\"operator\" />\r\n                    <Number onButtonClick={handleButtonPress} content='/' type=\"operator\" /> \r\n                    <Number onButtonClick={handleButtonPress} content='x' type=\"operator\" />\r\n                    <Number onButtonClick={handleButtonPress} content='=' type=\"operator\" />\r\n                    <Number onButtonClick={handleButtonPress} content='AC' type=\"function\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import './App.css';\nimport Calculator from './Calculator'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}